/**
 * Verifica la autenticaci√≥n del usuario mediante tokens y estado de sesi√≥n.
 * Si no est√° autenticado, redirige al login.
 * @returns {boolean} true si el usuario est√° autenticado, false en caso contrario
 */

/**
 * Limpia la sesi√≥n de forma espec√≠fica y segura
 */
function cleanSession() {
    // Limpiar datos espec√≠ficos de autenticaci√≥n
    sessionStorage.removeItem("isLoggedIn");
    sessionStorage.removeItem("loginTime");
    sessionStorage.removeItem("authToken");
    sessionStorage.removeItem("userId");
    sessionStorage.removeItem("documentValue");
    sessionStorage.removeItem("userRoles");
    sessionStorage.removeItem("userPermissions");
    sessionStorage.removeItem("userAvailability");
    sessionStorage.removeItem("firstName");
    sessionStorage.removeItem("lastName");
    sessionStorage.removeItem("userFullName");
    sessionStorage.removeItem("userRating");
}

function checkAuthentication() {
    // Verifica si el usuario est√° logueado y si existe un token en sessionStorage
    const isLoggedIn = sessionStorage.getItem("isLoggedIn") === "true";
    const token = sessionStorage.getItem("authToken");
    
    // Si no est√° logueado o no hay token, redirige al login
    if (!isLoggedIn || !token) {
        console.log("Usuario no autenticado o token no encontrado, redirigiendo al login...");
        window.location.href = "../../index.html";
        return false;
    }
    // Si pasa la validaci√≥n, retorna true
    return true;
}

/**
 * Actualiza la informaci√≥n del usuario en la interfaz.
 * Muestra el nombre completo del usuario si est√° disponible, 
 * caso contrario muestra el n√∫mero de documento, y como √∫ltimo recurso el ID de usuario.
 */
function updateUserDisplay() {
    // Obtiene la informaci√≥n del usuario desde sessionStorage
    const fullName = sessionStorage.getItem("userFullName");
    const firstName = sessionStorage.getItem("firstName");
    const lastName = sessionStorage.getItem("lastName");
    const documentValue = sessionStorage.getItem("documentValue");
    const userId = sessionStorage.getItem("userId");
    
    // Obtiene el elemento donde se muestra el usuario
    const userDisplay = document.getElementById("user-display");

    if (userDisplay) {
        // Prioridad 1: Nombre completo
        if (fullName && fullName.trim() !== "") {
            userDisplay.textContent = fullName.trim();
        }
        // Prioridad 2: Nombre y apellido por separado
        else if (firstName || lastName) {
            const displayName = `${firstName || ""} ${lastName || ""}`.trim();
            userDisplay.textContent = displayName || "Admin";
        }
        // Prioridad 3: N√∫mero de documento
        else if (documentValue) {
            userDisplay.textContent = `Doc. ${documentValue}`;
        }
        // Prioridad 4: ID de usuario como √∫ltimo recurso
        else if (userId) {
            userDisplay.textContent = `Usuario ${userId}`;
        }
        // Fallback: Texto por defecto
        else {
            userDisplay.textContent = "Admin";
        }
    }
}

/**
 * Verifica si la sesi√≥n ha expirado basado en el tiempo de inicio.
 * La sesi√≥n expira despu√©s de 30 minutos de inactividad.
 * Si expira, limpia la sesi√≥n y redirige al login.
 * @returns {boolean} true si la sesi√≥n es v√°lida, false si ha expirado
 */
function checkTokenExpiration() {
    // Obtiene el tiempo de inicio de sesi√≥n
    const loginTime = sessionStorage.getItem("loginTime");
    if (!loginTime) return false;
    
    // Calcula el tiempo transcurrido desde el inicio de sesi√≥n
    const now = Date.now();
    const sessionTime = parseInt(loginTime);
    const sessionDuration = 30 * 60 * 1000; // 30 minutos en milisegundos
    
    // Si la sesi√≥n ha expirado, limpia y redirige
    if (now - sessionTime > sessionDuration) {
        console.log("Sesi√≥n expirada, redirigiendo al login...");
        cleanSession();
        window.location.href = "../../index.html";
        return false;
    }
    // Si la sesi√≥n sigue activa, retorna true
    return true;
}

/**
 * Configura el evento de cierre de sesi√≥n en el bot√≥n de logout.
 * Al hacer click, limpia la sesi√≥n y redirige al login.
 */
function setupLogoutButton() {
    // Busca el bot√≥n de logout en la interfaz
    const logoutBtn = document.querySelector('.logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener("click", function(e) {
            e.preventDefault(); // Previene el comportamiento por defecto
            cleanSession(); // Usar funci√≥n de limpieza espec√≠fica
            window.location.href = "../../index.html"; // Redirige al login
        });
    }
}

/**
 * Verificador autom√°tico de estado de usuario
 * Verifica peri√≥dicamente si el usuario web sigue activo en el sistema
 */
class UserStatusMonitor {
    constructor() {
        this.intervalId = null;
        this.checkInterval = 2 * 60 * 1000; // 2 minutos (m√°s frecuente)
        this.isMonitoring = false;
    }

    /**
     * Inicia el monitoreo autom√°tico del estado del usuario
     */
    startMonitoring() {
        if (this.isMonitoring) {
            console.log('üîç UserStatusMonitor: Ya est√° activo');
            return;
        }

        // Solo monitorear usuarios web
        const userRoles = sessionStorage.getItem('userRoles');
        if (!userRoles) {
            console.log('üîç UserStatusMonitor: No hay roles de usuario en sesi√≥n');
            return;
        }

        try {
            const roles = JSON.parse(userRoles);
            const hasWebRoles = roles.some(role => role.web === true);
            
            if (!hasWebRoles) {
                console.log('üîç UserStatusMonitor: Usuario no tiene roles web, no es necesario monitorear');
                return;
            }
        } catch (e) {
            console.log('üîç UserStatusMonitor: Error al parsear roles');
            return;
        }

        console.log('üîç UserStatusMonitor: Iniciando monitoreo para usuario web');
        this.isMonitoring = true;

        // Verificaci√≥n inicial comentada para evitar logout inmediato al cargar la p√°gina
        // Solo usar verificaci√≥n peri√≥dica y on-demand
        // this.checkUserStatus();

        // Configurar verificaci√≥n peri√≥dica
        this.intervalId = setInterval(() => {
            this.checkUserStatus();
        }, this.checkInterval);
    }

    /**
     * Detiene el monitoreo
     */
    stopMonitoring() {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
        this.isMonitoring = false;
        console.log('üîç UserStatusMonitor: Monitoreo detenido');
    }

    /**
     * Verifica el estado actual del usuario
     */
    async checkUserStatus() {
        try {
            // Verificar que UserService est√© disponible
            if (typeof window.UserService === 'undefined') {
                console.log('üîç UserStatusMonitor: UserService no disponible, saltando verificaci√≥n');
                return;
            }

            console.log('üîç UserStatusMonitor: Verificaci√≥n peri√≥dica del estado del usuario...');
            
            // Usar verificaci√≥n ligera para monitoreo peri√≥dico (solo estado activo, no roles)
            const statusResult = await window.UserService.getCurrentUserStatusLight();

            if (statusResult.needsLogin) {
                console.log('üö´ UserStatusMonitor: Usuario requiere login');
                this.handleUserDeactivated(statusResult.message);
            } else if (statusResult.success) {
                console.log('‚úÖ UserStatusMonitor: Usuario activo');
            } else {
                console.log('‚ö†Ô∏è UserStatusMonitor: Error en verificaci√≥n:', statusResult.message);
            }

        } catch (error) {
            console.error('‚ùå UserStatusMonitor: Error al verificar estado:', error);
        }
    }

    /**
     * Fuerza una verificaci√≥n inmediata del estado del usuario
     * M√©todo p√∫blico para uso externo
     */
    async forceCheck() {
        console.log('üîç UserStatusMonitor: Forzando verificaci√≥n inmediata...');
        await this.checkUserStatus();
    }

    /**
     * Maneja el caso cuando el usuario ha sido desactivado
     */
    handleUserDeactivated(message) {
        console.log('üö´ UserStatusMonitor: Usuario desactivado, cerrando sesi√≥n...');
        
        this.stopMonitoring();
        
        // Mostrar mensaje al usuario con color celeste espec√≠fico para desactivaci√≥n
        if (typeof window.showToast === 'function') {
            window.showToast('Tu cuenta ha sido desactivada. Ser√°s redirigido al login.', 'deactivated');
        } else if (typeof window.GlobalToast !== 'undefined' && window.GlobalToast.show) {
            window.GlobalToast.show('Tu cuenta ha sido desactivada. Ser√°s redirigido al login.', 'deactivated');
        } else {
            alert('Tu cuenta ha sido desactivada. Ser√°s redirigido al login.');
        }

        // Esperar un momento para que se muestre el mensaje
        setTimeout(() => {
            // Limpiar sesi√≥n
            if (typeof cleanSession === 'function') {
                cleanSession();
            }
            
            // Redirigir al login
            window.location.href = "../../index.html";
        }, 2000);
    }
}

// Crear instancia global del monitor
const userStatusMonitor = new UserStatusMonitor();

/**
 * Funci√≥n de utilidad para inicializar autom√°ticamente el monitoreo
 * Se puede llamar desde cualquier p√°gina web
 */
function initUserStatusMonitoring() {
    if (window.authChecker && window.authChecker.userStatusMonitor) {
        console.log('üîç Iniciando monitoreo autom√°tico de estado de usuario...');
        window.authChecker.userStatusMonitor.startMonitoring();
        return true;
    } else {
        console.log('‚ö†Ô∏è Monitor de estado de usuario no disponible');
        return false;
    }
}

/**
 * Exporta las funciones como un objeto global para uso en otros archivos.
 * Permite acceder a las funciones desde cualquier parte de la aplicaci√≥n.
 */
window.authChecker = {
    checkAuthentication,
    updateUserDisplay,
    checkTokenExpiration,
    setupLogoutButton,
    userStatusMonitor, // A√±adir el monitor al objeto global
    initUserStatusMonitoring // A√±adir funci√≥n de utilidad
};

// Exportar tambi√©n la funci√≥n de utilidad globalmente
window.initUserStatusMonitoring = initUserStatusMonitoring;
