/**
 * Inicializador simplificado para controladores modulares de usuarios
 * Usa MainController para inicializar componentes base
 */

console.log('üìù üö® USERS-INITIALIZER.JS SE EST√Å CARGANDO üö®');

class UsersInitializer {
    static async init() {
        console.log('üë• === INICIANDO M√ìDULO DE GESTI√ìN DE USUARIOS ===');
        
        // Verificar dependencias cr√≠ticas
        console.log('üîç Verificando dependencias...');
        console.log('- authChecker:', typeof authChecker);
        console.log('- MainController:', typeof MainController);
        console.log('- window.mainController:', !!window.mainController);
        console.log('- UserService:', typeof UserService);
        console.log('- UsersListController:', typeof UsersListController);
        console.log('- UserDetailsController:', typeof UserDetailsController);
        
        if (typeof authChecker === 'undefined') {
            console.error('‚ùå authChecker no est√° disponible - deteniendo inicializaci√≥n');
            return;
        }
        
        if (authChecker.checkAuthentication()) {
            console.log('‚úÖ Usuario autenticado - continuando inicializaci√≥n');
            
            authChecker.updateUserDisplay();
            authChecker.setupLogoutButton();
            
            // Inicializar ComponentLoader
            const componentLoader = new ComponentLoader();
            
            try {
                // Cargar componentes HTML din√°micamente ANTES de inicializar controladores
                console.log('üîÑ Cargando componentes HTML...');
                
                // Cargar sidebar
                await componentLoader.loadComponent('sidebar', '#sidebar-container', {
                    activeSection: window.pageConfig?.activeSection || 'configuracion'
                });
                
                // Cargar topbar
                await componentLoader.loadComponent('topbar', '#topbar-container', {
                    pageTitle: window.pageConfig?.pageTitle || { icon: 'fas fa-users', text: 'Gesti√≥n de Usuarios' }
                });
                
                // Cargar profile modal
                await componentLoader.loadComponent('profile-modal', '#modal-container');
                
                console.log('‚úÖ Todos los componentes HTML cargados');
                
                // Esperar m√°s tiempo para que el DOM se actualice completamente
                setTimeout(() => {
                    // Inicializar controladores base
                    if (!window.sidebarControllerInstance) {
                        window.sidebarControllerInstance = new SidebarController();
                        console.log('üìÅ SidebarController inicializado');
                    }
                    
                    // Inicializar TopBarController DESPU√âS del sidebar con delay adicional
                    setTimeout(() => {
                        if (!window.topBarControllerInstance) {
                            window.topBarControllerInstance = new TopBarController();
                            console.log('üîù TopBarController inicializado');
                        }
                    }, 200);
                    
                    // Inicializar ProfileController
                    if (!window.profileControllerInstance) {
                        window.profileControllerInstance = new ProfileController();
                        console.log('üë§ ProfileController inicializado');
                        
                        // Establecer referencia al profile controller en topbar
                        if (window.topBarControllerInstance) {
                            window.topBarControllerInstance.profileController = window.profileControllerInstance;
                            console.log('üîó Referencia profile-topbar establecida');
                        }
                    }
                    
                    // Inicializar controladores espec√≠ficos de usuarios
                    setTimeout(() => {
                        UsersInitializer.initializeUsersControllers();
                    }, 100);
                    
                    // Configurar permisos DESPU√âS de que los controladores est√©n listos
                    setTimeout(() => {
                        if (window.PermissionsService) {
                            console.log('üîß Inicializando sistema de permisos...');
                            window.PermissionsService.initializePermissions();
                        }
                        
                        console.log('‚úÖ Gesti√≥n de Usuarios inicializada completamente');
                    }, 200);
                    
                }, 500);
                
            } catch (error) {
                console.error('‚ùå Error cargando componentes:', error);
            }
            
        } else {
            console.log('‚ùå Usuario no autenticado - redirigiendo...');
        }
    }

    /**
     * Inicializa solo los controladores espec√≠ficos de usuarios
     */
    static initializeUsersControllers() {
        console.log('üìã === INICIALIZANDO CONTROLADORES DE USUARIOS ===');
        
        // Verificar que los controladores base est√©n listos
        if (window.mainController && window.mainController.areBaseControllersReady()) {
            console.log('‚úÖ Controladores base listos, inicializando controladores de usuarios...');
        } else {
            console.warn('‚ö†Ô∏è Controladores base no est√°n completamente listos');
        }
        
        // Inicializar UsersListController
        console.log('üìã Inicializando UsersListController...');
        if (typeof UsersListController !== 'undefined') {
            try {
                if (!window.usersListController) {
                    window.usersListController = new UsersListController();
                    console.log('üìã UsersListController creado, iniciando...');
                    
                    window.usersListController.init()
                        .then(() => {
                            console.log('‚úÖ UsersListController inicializado completamente');
                        })
                        .catch(error => {
                            console.error('‚ùå Error inicializando UsersListController:', error);
                        });
                } else {
                    console.log('‚ÑπÔ∏è UsersListController ya existe');
                }
            } catch (error) {
                console.error('‚ùå Error creando UsersListController:', error);
            }
        } else {
            console.error('‚ùå UsersListController no disponible');
        }
        
        // Inicializar UserDetailsController
        console.log('üëÅÔ∏è Inicializando UserDetailsController...');
        if (typeof UserDetailsController !== 'undefined') {
            try {
                if (!window.UserDetailsController) {
                    window.UserDetailsController = new UserDetailsController();
                    console.log('‚úÖ UserDetailsController inicializado');
                } else {
                    console.log('‚ÑπÔ∏è UserDetailsController ya existe');
                }
            } catch (error) {
                console.error('‚ùå Error en UserDetailsController:', error);
            }
        } else {
            console.error('‚ùå UserDetailsController no disponible');
        }
        
        // Inicializar UserCreateController
        console.log('‚ûï Inicializando UserCreateController...');
        console.log('‚ûï Verificando disponibilidad de UserCreateController:', typeof UserCreateController);
        console.log('‚ûï Estado actual de window.UserCreateController:', !!window.UserCreateController);
        console.log('‚ûï UserService disponible:', typeof UserService);
        console.log('‚ûï Bootstrap disponible:', typeof bootstrap);
        
        if (typeof UserCreateController !== 'undefined') {
            try {
                if (!window.userCreateController) {
                    console.log('‚ûï Creando nueva instancia de UserCreateController...');
                    window.userCreateController = new UserCreateController();
                    console.log('‚úÖ UserCreateController creado exitosamente');
                    console.log('‚ûï Verificando que se puede acceder a openModal:', typeof window.userCreateController.openModal);
                } else {
                    console.log('‚ÑπÔ∏è userCreateController ya existe');
                }
            } catch (error) {
                console.error('‚ùå Error creando UserCreateController:', error);
                console.error('‚ùå Stack trace:', error.stack);
                console.error('‚ùå Dependencias faltantes:');
                console.error('   - UserService:', typeof UserService);
                console.error('   - bootstrap.Modal:', typeof bootstrap?.Modal);
                console.error('   - document.getElementById:', typeof document?.getElementById);
            }
        } else {
            console.error('‚ùå UserCreateController no disponible - clase no definida');
            console.error('‚ùå Verificando scripts cargados...');
            console.error('‚ùå UserService:', typeof UserService);
            console.error('‚ùå Bootstrap Modal:', typeof bootstrap?.Modal);
        }
        
        // Verificaci√≥n final
        console.log('üîç === VERIFICACI√ìN FINAL DE USUARIOS ===');
        console.log('- UsersListController:', !!window.usersListController);
        console.log('- UserDetailsController:', !!window.UserDetailsController);
        console.log('- userCreateController:', !!window.userCreateController);
        console.log('‚úÖ Controladores de usuarios inicializados');
    }

    /**
     * Fallback: inicializa controladores b√°sicos si hay alg√∫n error
     */
    static initializeFallback() {
        console.log('üîÑ Modo fallback...');
        
        if (typeof SidebarController !== 'undefined') {
            window.sidebarControllerInstance = new SidebarController();
        }
        
        if (typeof TopBarController !== 'undefined') {
            window.topBarControllerInstance = new TopBarController();
        }
        
        if (typeof UserDetailsController !== 'undefined') {
            window.UserDetailsController = new UserDetailsController();
        }
    }
}


// Auto-inicializar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    console.log('ÔøΩ DOM cargado, iniciando UsersInitializer...');
    
    // Peque√±o delay para asegurar que todos los scripts est√©n cargados
    setTimeout(() => {
        UsersInitializer.init();
    }, 500);
});

console.log('üìù UsersInitializer definido y configurado');
