/**
 * Inicializador para el m√≥dulo de Registro de Auditor√≠a
 * Sigue el patr√≥n de roles-initializer.js
 */

console.log('üîç üö® AUDIT-REGISTRY-INITIALIZER.JS SE EST√Å CARGANDO üö®');

// Inicializador dedicado para el m√≥dulo de Registro de Auditor√≠a
(function() {
    // Inicializar controladores base (sidebar, topbar, perfil)
    document.addEventListener('DOMContentLoaded', async () => {
        try {
            console.log('üîç Inicializando m√≥dulo de Registro de Auditor√≠a...');
            
            // Inicializar ComponentLoader y cargar componentes
            const componentLoader = new ComponentLoader();
            
            // Cargar componentes HTML din√°micamente ANTES de inicializar controladores
            console.log('üîÑ Cargando componentes HTML...');
            
            // Cargar sidebar
            await componentLoader.loadComponent('sidebar', '#sidebar-container', {
                activeSection: window.pageConfig?.activeSection || 'auditoria'
            });
            
            // Cargar topbar
            await componentLoader.loadComponent('topbar', '#topbar-container', {
                pageTitle: window.pageConfig?.pageTitle || { icon: 'fas fa-history', text: 'Registro de Auditor√≠a' }
            });
            
            // Cargar profile modal
            await componentLoader.loadComponent('profile-modal', '#modal-container');
            
            console.log('‚úÖ Todos los componentes HTML cargados');
            
            // Esperar un momento para que el DOM se actualice
            setTimeout(async () => {
                // Inicializar controladores base
                if (typeof SidebarController !== 'undefined') {
                    if (!window.sidebarControllerInstance) {
                        window.sidebarControllerInstance = new SidebarController();
                    }
                    console.log('‚úÖ SidebarController inicializado');
                }
                
                if (typeof TopBarController !== 'undefined') {
                    if (!window.topBarControllerInstance) {
                        window.topBarControllerInstance = new TopBarController();
                    }
                    console.log('‚úÖ TopBarController inicializado');
                }
                
                if (typeof ProfileController !== 'undefined') {
                    if (!window.profileControllerInstance) {
                        window.profileControllerInstance = new ProfileController();
                    }
                    console.log('‚úÖ ProfileController inicializado');
                }
                
                // Inicializar controlador espec√≠fico de Registro de Auditor√≠a
                if (typeof AuditRegistryController !== 'undefined') {
                    if (!window.auditRegistryController) {
                        window.auditRegistryController = new AuditRegistryController();
                    }
                    console.log('‚úÖ AuditRegistryController inicializado');
                }
                
                console.log('üîç ‚úÖ M√≥dulo de Registro de Auditor√≠a completamente inicializado');
                
            }, 200);
            
            // Verificaci√≥n √∫nica de token al cargar
            if (typeof window.authChecker !== 'undefined') {
                window.authChecker.checkTokenExpiration();
                console.log('‚úÖ Verificaci√≥n inicial de token realizada');
            }
            
            // Configurar permisos DESPU√âS de que los controladores est√©n listos
            setTimeout(() => {
                if (window.PermissionsService) {
                    console.log('üîß Inicializando sistema de permisos...');
                    window.PermissionsService.initializePermissions();
                }
            }, 400);
            
        } catch (error) {
            console.error('‚ùå Error inicializando m√≥dulo de Registro de Auditor√≠a:', error);
        }
    });
})();

console.log('‚úÖ Audit Registry Initializer cargado');
