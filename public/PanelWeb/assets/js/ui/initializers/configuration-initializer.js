/**
 * Inicializador espec√≠fico para la p√°gina de Configuration
 * Maneja solo los controladores necesarios para esta p√°gina espec√≠fica
 */
class ConfigurationInitializer {
    static async init() {
        console.log('‚öôÔ∏è Inicializando p√°gina de Configuration...');
        
        if (authChecker.checkAuthentication()) {
            authChecker.updateUserDisplay();
            authChecker.setupLogoutButton();
            
            // Inicializar controladores base necesarios
            if (!window.sidebarControllerInstance) {
                window.sidebarControllerInstance = new SidebarController();
                console.log('üìÅ SidebarController inicializado');
            }

            // Inicializar TopBarController
            if (!window.topBarControllerInstance) {
                window.topBarControllerInstance = new TopBarController();
                console.log('üìä TopBarController inicializado');
            }

            // Inicializar ProfileController de forma INDEPENDIENTE
            if (!window.profileControllerInstance) {
                window.profileControllerInstance = new ProfileController();
                console.log('üë§ ProfileController inicializado');            }            // Los controladores espec√≠ficos de configuraci√≥n se auto-inicializan
            // EmergencyContactController, PermissionsController y RolesController
            // se inicializan autom√°ticamente si detectan sus elementos en el DOM
            console.log('‚öôÔ∏è Controladores de configuraci√≥n se inicializar√°n autom√°ticamente');

            // Configurar funcionalidad adicional para permisos
            ConfigurationInitializer.setupPermissionsFeatures();

            // Configurar permisos inmediatamente con pantalla de carga
            if (window.PermissionsService) {
                console.log('üîß Inicializando sistema de permisos...');
                window.PermissionsService.initializePermissions();
            }

            // Configurar verificaci√≥n de sesi√≥n
            setInterval(authChecker.checkTokenExpiration, 60000);
            
            console.log('‚úÖ P√°gina de Configuration completamente inicializada');
        } else {
            console.log('‚ùå Usuario no autenticado, redirigiendo...');
        }
    }

    /**
     * Configura funcionalidades adicionales para permisos
     */
    static setupPermissionsFeatures() {
        console.log('üìã Configurando funcionalidades de permisos...');
        
        // Verificar que el servicio de configuraci√≥n est√© disponible
        const checkServices = () => {
            if (window.ConfigurationService) {
                console.log('‚úÖ ConfigurationService disponible');
                
                // Verificar que el controlador est√© disponible
                setTimeout(() => {
                    if (window.permissionsController) {
                        console.log('‚úÖ PermissionsController disponible y configurado');
                    } else {
                        console.log('‚ö†Ô∏è PermissionsController no disponible a√∫n');
                    }
                }, 500);
            } else {
                console.log('‚ö†Ô∏è ConfigurationService no disponible, esperando...');
                setTimeout(checkServices, 100);
            }
        };
        
        checkServices();
    }
}

// Auto-inicializaci√≥n cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', ConfigurationInitializer.init);
