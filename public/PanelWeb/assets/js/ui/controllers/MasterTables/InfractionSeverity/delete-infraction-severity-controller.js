// Archivo: DeleteInfractionSeverityController.js
// Ubicaci√≥n: assets/js/ui/controllers/MasterTables/InfractionSeverity/delete-infraction-severity-controller.js

/**
 * Controlador para eliminar severidades de infracci√≥n usando modal de confirmaci√≥n global
 */
class DeleteInfractionSeverityController {
    constructor() {
        this.deleteService = window.DeleteInfractionSeverityService;
        this.confirmationModal = null;
        this.init();
    }

    /**
     * Inicializa el controlador y asegura el modal de confirmaci√≥n
     */
    init() {
        // Usar SIEMPRE el modal global, nunca alternativo
        if (window.globalConfirmationModal) {
            this.confirmationModal = window.globalConfirmationModal;
            console.log('‚úÖ Modal de confirmaci√≥n global encontrado (globalConfirmationModal)');
        } else {
            throw new Error('No se encontr√≥ el modal global de confirmaci√≥n (globalConfirmationModal)');
        }
    }

    /**
     * Maneja el click del bot√≥n eliminar desde la tabla
     * @param {HTMLElement} button - Bot√≥n que dispar√≥ la acci√≥n
     * @param {Object} infractionSeverityData - Datos de la severidad
     */
    handleDeleteButtonClick(button, infractionSeverityData) {
        const onSuccess = () => {
            if (window.infractionSeverityListController && typeof window.infractionSeverityListController.load === 'function') {
                window.infractionSeverityListController.load();
            }
            if (window.GlobalToast && typeof window.GlobalToast.show === 'function') {
                window.GlobalToast.show(`Gravedad de infracci√≥n "${infractionSeverityData.name}" eliminada exitosamente`, 'success');
            }
        };
        const onError = (error) => {
            if (window.GlobalToast && typeof window.GlobalToast.show === 'function') {
                window.GlobalToast.show(`Error al eliminar gravedad de infracci√≥n: ${error.message}`, 'error');
            }
        };
        this.requestDelete(infractionSeverityData, onSuccess, onError);
    }

    /**
     * Solicita confirmaci√≥n y elimina una severidad
     * @param {Object} infractionSeverityData - Datos de la severidad a eliminar
     * @param {Function} onSuccess - Callback en caso de √©xito
     * @param {Function} onError - Callback en caso de error
     */
    async requestDelete(infractionSeverityData, onSuccess = null, onError = null) {
        try {
            console.log('üóëÔ∏è Solicitando eliminaci√≥n de gravedad de infracci√≥n:', infractionSeverityData);
            // Validaci√≥n b√°sica
            if (!infractionSeverityData.id || typeof infractionSeverityData.id !== 'number' || infractionSeverityData.id <= 0) {
                const errorMessage = 'ID de la gravedad de infracci√≥n es requerido y debe ser un n√∫mero v√°lido';
                console.error('‚ùå Validaci√≥n fallida:', errorMessage);
                if (onError) onError(new Error(errorMessage));
                return;
            }
            // Configuraci√≥n del modal de confirmaci√≥n
            const confirmConfig = {
                title: 'Eliminar Gravedad de Infracci√≥n',
                name: infractionSeverityData.name || 'Gravedad de Infracci√≥n',
                subtitle: `¬øEst√° seguro de que desea eliminar la gravedad "${infractionSeverityData.name}"? Esta acci√≥n no se puede deshacer.`,
                onConfirm: async () => {
                    await this.executeDelete(infractionSeverityData, onSuccess, onError);
                }
            };
            this.confirmationModal.showConfirmation(confirmConfig);
        } catch (error) {
            console.error('‚ùå Error al solicitar eliminaci√≥n:', error);
            if (onError) onError(error);
        }
    }

    /**
     * Ejecuta la eliminaci√≥n de la severidad
     * @param {Object} infractionSeverityData - Datos de la severidad
     * @param {Function} onSuccess - Callback de √©xito
     * @param {Function} onError - Callback de error
     */
    async executeDelete(infractionSeverityData, onSuccess = null, onError = null) {
        try {
            const response = await this.deleteService.deleteInfractionSeverity(infractionSeverityData.id);
            if (onSuccess) onSuccess(response);
        } catch (error) {
            if (onError) onError(error);
        }
    }
}

// Hacer disponible globalmente
window.DeleteInfractionSeverityController = DeleteInfractionSeverityController;
