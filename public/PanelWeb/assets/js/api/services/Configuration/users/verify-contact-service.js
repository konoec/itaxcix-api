/**
 * VerifyContactService - Servicio para verificar contactos de usuarios
 * Maneja la verificaci√≥n manual de contactos de email y tel√©fono
 */

class VerifyContactService {
    constructor() {
        this.baseUrl = 'https://149.130.161.148/api/v1';
        this.updateAuthToken(); // Actualizar token al inicializar
    }

    /**
     * Actualizar token de autenticaci√≥n desde sessionStorage o localStorage
     */
    updateAuthToken(newToken = null) {
        if (newToken) {
            this.authToken = newToken;
        } else {
            // Buscar token en sessionStorage o localStorage
            this.authToken = sessionStorage.getItem('token') || 
                            sessionStorage.getItem('authToken') || 
                            localStorage.getItem('token') || 
                            localStorage.getItem('authToken');
        }
        console.log('üîë Token de autenticaci√≥n actualizado en VerifyContactService:', this.authToken ? 'Presente' : 'Ausente');
    }

    /**
     * Verificar un contacto espec√≠fico de un usuario
     * @param {number} userId - ID del usuario
     * @param {number} contactId - ID del contacto a verificar
     * @returns {Promise<Object>} Respuesta de la API
     */
    async verifyContact(userId, contactId) {
        try {
            // Asegurar que tenemos el token m√°s actualizado
            this.updateAuthToken();
            
            if (!this.authToken) {
                throw new Error('No hay token de autenticaci√≥n disponible');
            }

            console.log(`üîç Verificando contacto ${contactId} del usuario ${userId}...`);
            console.log(`üì° Enviando POST a: ${this.baseUrl}/users/${userId}/verify-contact`);
            console.log(`üì¶ Body de la petici√≥n:`, { contactId: contactId });
            
            const response = await fetch(`${this.baseUrl}/users/${userId}/verify-contact`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.authToken}`
                },
                body: JSON.stringify({
                    contactId: contactId
                })
            });

            console.log('üì° Respuesta del servidor:', response.status, response.statusText);

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                console.error('‚ùå Error en la verificaci√≥n:', errorData);
                throw new Error(errorData.message || `Error al verificar contacto: ${response.status}`);
            }

            const result = await response.json();
            console.log('‚úÖ Contacto verificado exitosamente:', result);
            
            return {
                success: true,
                data: result,
                message: result.message || 'Contacto verificado exitosamente'
            };

        } catch (error) {
            console.error('‚ùå Error en VerifyContactService.verifyContact:', error);
            return {
                success: false,
                error: error.message,
                message: error.message || 'Error al verificar el contacto'
            };
        }
    }

    /**
     * Obtener los contactos de un usuario
     * @param {number} userId - ID del usuario
     * @returns {Promise<Object>} Contactos del usuario
     */
    async getUserContacts(userId) {
        try {
            console.log(`üîç Obteniendo contactos del usuario ${userId}...`);
            
            // Asegurar que tenemos el token m√°s actualizado
            this.updateAuthToken();
            
            if (!this.authToken) {
                throw new Error('No hay token de autenticaci√≥n disponible');
            }
            
            const response = await fetch(`${this.baseUrl}/users/${userId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.authToken}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log(`üì° Respuesta de obtener usuario - Status: ${response.status}`);

            if (!response.ok) {
                const errorText = await response.text();
                console.error(`‚ùå Error HTTP al obtener usuario: ${response.status} - ${errorText}`);
                throw new Error(`Error al obtener usuario: ${response.status}`);
            }

            const result = await response.json();
            console.log('üìã Datos del usuario obtenidos:', result);
            
            const contacts = result.data?.contacts || [];
            console.log('üìû Contactos del usuario:', contacts);
            console.log(`üìû Total de contactos encontrados: ${contacts.length}`);
            
            // Mostrar informaci√≥n detallada de cada contacto
            contacts.forEach((contact, index) => {
                console.log(`üìû Contacto ${index + 1}:`, {
                    id: contact.id,
                    type: contact.type?.name || contact.type,
                    value: contact.value,
                    confirmed: contact.confirmed
                });
            });
            
            return {
                success: true,
                data: contacts
            };

        } catch (error) {
            console.error('‚ùå Error al obtener contactos del usuario:', error);
            return {
                success: false,
                error: error.message,
                message: 'Error al obtener contactos del usuario: ' + error.message
            };
        }
    }

    /**
     * Verificar contacto de email del usuario
     * @param {number} userId - ID del usuario
     * @returns {Promise<Object>} Respuesta de la API
     */
    async verifyEmailContact(userId) {
        console.log(`üìß Iniciando verificaci√≥n de email para usuario ${userId}`);
        
        try {
            // Primero obtener los contactos del usuario
            const contactsResult = await this.getUserContacts(userId);
            if (!contactsResult.success) {
                return contactsResult;
            }

            // Buscar el contacto de email con b√∫squeda m√°s flexible
            console.log('üîç Buscando contacto de email entre los tipos disponibles...');
            
            const emailContact = contactsResult.data.find(contact => {
                // Manejar tanto la estructura anidada (type.name) como la simple (type)
                const typeName = contact.type?.name || contact.type;
                const type = typeName?.toString().toLowerCase().trim();
                console.log(`üîç Evaluando contacto tipo: "${typeName}" (normalizado: "${type}")`);
                
                return type === 'correo electr√≥nico' || 
                       type === 'correo electronico' ||
                       type === 'email' ||
                       type === 'e-mail' ||
                       type.includes('correo') ||
                       type.includes('email') ||
                       type.includes('mail');
            });

            if (!emailContact) {
                console.log('‚ùå No se encontr√≥ contacto de email');
                const availableTypes = contactsResult.data.map(c => c.type?.name || c.type);
                console.log('üìã Tipos de contacto disponibles:', availableTypes);
                return {
                    success: false,
                    message: `No se encontr√≥ un contacto de email para este usuario. Tipos disponibles: ${availableTypes.join(', ')}`
                };
            }

            console.log(`üìß Contacto de email encontrado:`, emailContact);
            console.log(`üìß Verificando contacto de email ID ${emailContact.id} del usuario ${userId}`);
            
            return await this.verifyContact(userId, emailContact.id);

        } catch (error) {
            console.error('‚ùå Error en verificaci√≥n de email:', error);
            return {
                success: false,
                error: error.message,
                message: 'Error al verificar email'
            };
        }
    }

    /**
     * Verificar contacto de tel√©fono del usuario
     * @param {number} userId - ID del usuario
     * @returns {Promise<Object>} Respuesta de la API
     */
    async verifyPhoneContact(userId) {
        console.log(`üì± Iniciando verificaci√≥n de tel√©fono para usuario ${userId}`);
        
        try {
            // Primero obtener los contactos del usuario
            const contactsResult = await this.getUserContacts(userId);
            if (!contactsResult.success) {
                return contactsResult;
            }

            // Buscar el contacto de tel√©fono con b√∫squeda m√°s flexible
            console.log('üîç Buscando contacto de tel√©fono entre los tipos disponibles...');
            
            const phoneContact = contactsResult.data.find(contact => {
                // Manejar tanto la estructura anidada (type.name) como la simple (type)
                const typeName = contact.type?.name || contact.type;
                const type = typeName?.toString().toLowerCase().trim();
                console.log(`üîç Evaluando contacto tipo: "${typeName}" (normalizado: "${type}")`);
                
                return type === 'tel√©fono m√≥vil' || 
                       type === 'telefono movil' ||
                       type === 'tel√©fono' ||
                       type === 'telefono' ||
                       type === 'phone' ||
                       type === 'm√≥vil' ||
                       type === 'movil' ||
                       type.includes('tel√©fono') ||
                       type.includes('telefono') ||
                       type.includes('phone') ||
                       type.includes('m√≥vil') ||
                       type.includes('movil');
            });

            if (!phoneContact) {
                console.log('‚ùå No se encontr√≥ contacto de tel√©fono');
                const availableTypes = contactsResult.data.map(c => c.type?.name || c.type);
                console.log('üìã Tipos de contacto disponibles:', availableTypes);
                return {
                    success: false,
                    message: `No se encontr√≥ un contacto de tel√©fono para este usuario. Tipos disponibles: ${availableTypes.join(', ')}`
                };
            }

            console.log(`üì± Contacto de tel√©fono encontrado:`, phoneContact);
            console.log(`üì± Verificando contacto de tel√©fono ID ${phoneContact.id} del usuario ${userId}`);
            
            return await this.verifyContact(userId, phoneContact.id);

        } catch (error) {
            console.error('‚ùå Error en verificaci√≥n de tel√©fono:', error);
            return {
                success: false,
                error: error.message,
                message: 'Error al verificar tel√©fono'
            };
        }
    }

}

// Crear instancia global del servicio
if (typeof window !== 'undefined') {
    window.VerifyContactService = new VerifyContactService();
    console.log('‚úÖ VerifyContactService inicializado y disponible globalmente');
}

// Exportar para uso en m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = VerifyContactService;
}
