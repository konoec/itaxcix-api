asyncapi: '2.6.0'
info:
  title: API WebSocket de iTaxCix
  version: '1.4.0'
  description: |
    API WebSocket en tiempo real para seguimiento de conductores y notificaciones de viajes en la plataforma iTaxCix.
    
    Esta API maneja la comunicaci√≥n en tiempo real entre conductores y pasajeros, incluyendo seguimiento de ubicaci√≥n,
    solicitudes de viajes, respuestas y actualizaciones de estado con gesti√≥n autom√°tica de disponibilidad de conductores.
    
    ## üîí Seguridad y Autenticaci√≥n H√≠brida
    
    **La API utiliza un sistema h√≠brido de autenticaci√≥n**:
    1. **JWT para autenticaci√≥n b√°sica** - Valida que el usuario puede conectarse
    2. **Mensaje `identify` para configuraci√≥n** - Env√≠a datos espec√≠ficos del cliente
    
    ### M√©todos de Autenticaci√≥n JWT Soportados:
    
    1. **Query Parameter** (Recomendado para clientes web):
       ```javascript
       const ws = new WebSocket(`wss://api.itaxcix.com/ws?token=${jwtToken}`);
       ```
    
    2. **Authorization Header** (Est√°ndar HTTP):
       ```javascript
       const ws = new WebSocket('wss://api.itaxcix.com/ws', [], {
         headers: { 'Authorization': `Bearer ${jwtToken}` }
       });
       ```
    
    3. **WebSocket Subprotocol** (M√©todo alternativo):
       ```javascript
       const ws = new WebSocket('wss://api.itaxcix.com/ws', [`token.${jwtToken}`]);
       ```
    
    ### Estructura del Token JWT (Con Validaci√≥n de Seguridad):
    
    El token ahora incluye informaci√≥n de seguridad para prevenir suplantaci√≥n:
    
    ```json
    {
      "userId": 123,
      "userType": "driver|citizen",  // ‚Üê REQUERIDO para validaci√≥n de seguridad
      "exp": 1703980800,
      "iat": 1703894400,
      // Datos adicionales para el panel web (legacy)
      "user_id": 123,
      "roles": ["DRIVER"],
      "permissions": [...]
    }
    ```
    
    **‚ö†Ô∏è IMPORTANTE**: El `userType` se determina autom√°ticamente desde la base de datos:
    - Si el usuario tiene `DriverProfile` aprobado ‚Üí `userType: "driver"`
    - Si no tiene `DriverProfile` ‚Üí `userType: "citizen"`
    
    ### Validaciones de Seguridad:
    
    - ‚úÖ **Firma del token**: Verificada con clave secreta
    - ‚úÖ **Expiraci√≥n**: Token debe estar vigente  
    - ‚úÖ **Claims requeridos**: `userId` Y `userType` obligatorios
    - ‚úÖ **Validaci√≥n de identidad**: El `userType` del JWT debe coincidir con el `clientType` del mensaje `identify`
    - ‚úÖ **Protecci√≥n contra suplantaci√≥n**: Imposible que un ciudadano se haga pasar por conductor o viceversa
    - ‚úÖ **Rechazo autom√°tico**: Conexiones sin token v√°lido o intentos de suplantaci√≥n
    
    ## Flujo de Conexi√≥n H√≠brido
    
    1. **üîë Obtener token JWT** desde tu sistema de autenticaci√≥n (login)
    2. **üîå Conectar** al endpoint WebSocket con el token
    3. **‚úÖ Autenticaci√≥n JWT** - Solo valida acceso b√°sico
    4. **üì® Recibir confirmaci√≥n** - Servidor confirma autenticaci√≥n pero requiere identify
    5. **üÜî Enviar mensaje `identify`** - Cliente env√≠a tipo y datos espec√≠ficos
    6. **üí¨ Funcionamiento completo** - Cliente configurado para intercambiar mensajes
    
    ### Ejemplo de Flujo Completo:
    
    ```javascript
    // 1. Conectar con token JWT
    const token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...";
    const ws = new WebSocket(`ws://localhost:8080?token=${token}`);
    
    ws.onopen = function() {
        console.log('üîê Conectado y autenticado con JWT');
    };
    
    ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        
        if (data.type === 'connection_status' && data.data.requiresIdentify) {
            console.log('‚ö†Ô∏è Necesito enviar identify');
            
            // 2. Enviar identify seg√∫n el tipo de cliente
            if (isDriver) {
                ws.send(JSON.stringify({
                    type: 'identify',
                    clientType: 'driver', 
                    userId: 123,
                    driverData: {
                        fullName: "Juan P√©rez",
                        image: "..base64...",
                        location: { lat: -12.0464, lng: -77.0428 }, // ‚Üê Ubicaci√≥n actual
                        rating: 4.8
                    }
                }));
            } else {
                ws.send(JSON.stringify({
                    type: 'identify',
                    clientType: 'citizen',
                    userId: 456
                }));
            }
        }
        
        if (data.type === 'identify_confirm') {
            console.log('‚úÖ Cliente configurado completamente');
            // Ahora puede enviar mensajes normales
        }
    };
    ```
    
    ## Caracter√≠sticas Principales
    
    - **üîê Autenticaci√≥n JWT b√°sica** para acceso seguro
    - **üÜî Sistema identify flexible** para datos espec√≠ficos
    - **üó∫Ô∏è Seguimiento de conductores en tiempo real** con actualizaciones de ubicaci√≥n
    - **‚ö° Gesti√≥n autom√°tica de disponibilidad** basada en el estado del viaje
    - **‚è±Ô∏è Expiraci√≥n de mensajes con TTL** para rendimiento √≥ptimo
    - **üîÑ Comunicaci√≥n bidireccional** entre conductores y pasajeros
    - **üìä Persistencia respaldada por Redis** para escalabilidad
    
    ## Sistema de Disponibilidad de Conductores
    
    El sistema gestiona autom√°ticamente la disponibilidad de conductores seg√∫n el estado del viaje:
    
    | Estado | Disponibilidad | Visible para Ciudadanos |
    |--------|---------------|-------------------------|
    | Conectado | Disponible | ‚úÖ S√≠ |
    | Viaje Aceptado | Ocupado | ‚ùå No |
    | Viaje Completado/Cancelado | Disponible | ‚úÖ S√≠ |
    
    ## Expiraci√≥n de Mensajes (TTL)
    
    | Tipo de Mensaje | TTL | Comportamiento |
    |-----------------|-----|----------------|
    | `trip_request` | 30s | Se descarta si no se entrega |
    | `trip_response` | 30s | Se descarta si no se entrega |
    | `driver_location_update` | 10s | Se descarta si no se entrega |
    | `trip_status_update` | ‚àû | Siempre se entrega |
    
    ## M√°quina de Estados de Viaje
    
    ```
    SOLICITADO ‚îÄ‚îÄaceptar‚îÄ‚îÄ‚ñ∂ ACEPTADO ‚îÄ‚îÄiniciar‚îÄ‚îÄ‚ñ∂ INICIADO ‚îÄ‚îÄcompletar‚îÄ‚îÄ‚ñ∂ FINALIZADO
         ‚îÇ                     ‚îÇ                     ‚îÇ
         ‚îî‚îÄ‚îÄrechazar‚îÄ‚îÄ‚ñ∂ RECHAZADO    ‚îî‚îÄ‚îÄcancelar‚îÄ‚îÄ‚ñ∂ CANCELADO ‚óÄ‚îÄ‚îÄcancelar‚îÄ‚îÄ‚îò
    ```

  contact:
    name: Equipo de Desarrollo iTaxCix
    email: dev@itaxcix.com
  license:
    name: Propietario
    url: https://itaxcix.com/license

servers:
  production:
    url: wss://api.itaxcix.com/ws
    protocol: wss
    description: Servidor WebSocket de producci√≥n (Requiere JWT)
    security:
      - JWTAuth: []
  staging:
    url: wss://staging-api.itaxcix.com/ws
    protocol: wss
    description: Ambiente de pruebas (Requiere JWT)
    security:
      - JWTAuth: []
  development:
    url: ws://localhost:8080
    protocol: ws
    description: Servidor de desarrollo local (Requiere JWT)
    security:
      - JWTAuth: []

defaultContentType: application/json

channels:
  /:
    description: |
      Canal principal de WebSocket para todas las comunicaciones en tiempo real.
      
      **üîí Requiere autenticaci√≥n JWT v√°lida durante el handshake.**
      
      **Flujo h√≠brido**:
      1. Autenticaci√≥n JWT autom√°tica al conectar
      2. Mensaje `identify` requerido para configuraci√≥n completa
      3. Intercambio normal de mensajes una vez identificado
    bindings:
      ws:
        query:
          type: object
          properties:
            token:
              type: string
              description: Token JWT para autenticaci√≥n b√°sica
        headers:
          type: object
          properties:
            Authorization:
              type: string
              description: "Bearer token para autenticaci√≥n: 'Bearer {jwt}'"
    publish:
      operationId: enviarMensaje
      summary: Enviar mensajes del cliente al servidor
      description: |
        Mensajes que los clientes autenticados pueden enviar al servidor.
        
        **‚ö†Ô∏è Importante**: Despu√©s de conectar con JWT, DEBES enviar el mensaje `identify` 
        antes de poder usar otros mensajes del WebSocket.
      security:
        - JWTAuth: []
      message:
        oneOf:
          - $ref: '#/components/messages/MensajeIdentificar'
          - $ref: '#/components/messages/MensajeRegistrarConductor'
          - $ref: '#/components/messages/MensajeActualizarUbicacion'
          - $ref: '#/components/messages/MensajeSolicitudViaje'
          - $ref: '#/components/messages/MensajeRespuestaViaje'
          - $ref: '#/components/messages/MensajeActualizacionEstadoViaje'
    subscribe:
      operationId: recibirMensaje
      summary: Recibir mensajes del servidor al cliente
      description: |
        Mensajes que los clientes autenticados reciben del servidor.
        
        **Autom√°tico al conectar**:
        - `connection_status`: Confirmaci√≥n de autenticaci√≥n JWT (requiere identify)
        
        **Despu√©s del identify**:
        - `identify_confirm`: Confirmaci√≥n de configuraci√≥n completa
        - `initial_drivers`: Lista de conductores (solo para ciudadanos)
      security:
        - JWTAuth: []
      message:
        oneOf:
          - $ref: '#/components/messages/MensajeEstadoConexion'
          - $ref: '#/components/messages/MensajeConfirmacionIdentify'
          - $ref: '#/components/messages/MensajeListaConductoresIniciales'
          - $ref: '#/components/messages/MensajeNuevoConductor'
          - $ref: '#/components/messages/MensajeActualizacionUbicacionConductor'
          - $ref: '#/components/messages/MensajeConductorDesconectado'
          - $ref: '#/components/messages/MensajeConductorNoDisponible'
          - $ref: '#/components/messages/MensajeConductorDisponible'
          - $ref: '#/components/messages/NotificacionSolicitudViaje'
          - $ref: '#/components/messages/NotificacionRespuestaViaje'
          - $ref: '#/components/messages/NotificacionActualizacionEstadoViaje'
          - $ref: '#/components/messages/MensajeError'
          - $ref: '#/components/messages/MensajeErrorAutenticacion'

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Token JWT requerido para autenticaci√≥n con validaci√≥n de seguridad anti-suplantaci√≥n.
        
        **Claims OBLIGATORIOS**:
        - `userId`: ID del usuario (REQUERIDO)
        - `userType`: Tipo de usuario - "driver" o "citizen" (REQUERIDO para seguridad)
        - `exp`: Timestamp de expiraci√≥n
        - `iat`: Timestamp de emisi√≥n
        
        **Validaci√≥n de Seguridad**:
        El `userType` del token JWT debe coincidir exactamente con el `clientType` 
        enviado en el mensaje `identify`. Esto previene que:
        - Un ciudadano se haga pasar por conductor
        - Un conductor se haga pasar por ciudadano
        - Cualquier intento de suplantaci√≥n de identidad
        
        **Origen del userType**:
        Se determina autom√°ticamente en el login basado en la base de datos:
        - Usuario con DriverProfile aprobado ‚Üí "driver"
        - Usuario sin DriverProfile ‚Üí "citizen"

  messages:
    # Mensajes de Cliente a Servidor
    MensajeIdentificar:
      name: Identificar Cliente
      title: Identificaci√≥n y configuraci√≥n del cliente
      summary: |
        Mensaje OBLIGATORIO que debe enviarse despu√©s de la autenticaci√≥n JWT.
        Configura el tipo de cliente y env√≠a datos espec√≠ficos.
      payload:
        $ref: '#/components/schemas/PayloadIdentificar'
      examples:
        - name: Identificaci√≥n de conductor con datos
          summary: Conductor enviando tipo y datos de perfil
          payload:
            type: identify
            clientType: driver
            userId: 123
            driverData:
              fullName: "Juan P√©rez"
              image: "..base64..."
              location:
                lat: -12.0464
                lng: -77.0428
              rating: 4.8
        - name: Identificaci√≥n de ciudadano
          summary: Ciudadano enviando solo tipo
          payload:
            type: identify
            clientType: citizen
            userId: 456

    MensajeRegistrarConductor:
      name: Registrar Conductor
      title: Registro de datos adicionales del conductor
      summary: Permite a conductores ya identificados actualizar sus datos de perfil
      payload:
        $ref: '#/components/schemas/PayloadRegistrarConductor'
      examples:
        - name: Actualizaci√≥n de datos de conductor
          summary: Conductor actualizando su informaci√≥n
          payload:
            type: register_driver
            driverData:
              fullName: "Juan P√©rez Actualizado"
              image: "..base64..."
              location:
                lat: -12.0465
                lng: -77.0429
              rating: 4.9

    MensajeActualizarUbicacion:
      name: Actualizar Ubicaci√≥n
      title: Actualizaci√≥n de ubicaci√≥n del conductor
      summary: Conductores env√≠an su ubicaci√≥n actual para tracking en tiempo real
      payload:
        $ref: '#/components/schemas/PayloadActualizarUbicacion'
      examples:
        - name: Actualizaci√≥n de ubicaci√≥n
          summary: Conductor actualizando su posici√≥n GPS
          payload:
            type: update_location
            location:
              lat: -12.0465
              lng: -77.0429

    MensajeSolicitudViaje:
      payload:
        $ref: '#/components/schemas/PayloadSolicitudViaje'

    MensajeRespuestaViaje:
      payload:
        $ref: '#/components/schemas/PayloadRespuestaViaje'

    MensajeActualizacionEstadoViaje:
      payload:
        $ref: '#/components/schemas/PayloadActualizacionEstadoViaje'

    # Mensajes de Servidor a Cliente
    MensajeEstadoConexion:
      name: Estado de Conexi√≥n
      title: Confirmaci√≥n de autenticaci√≥n JWT b√°sica
      summary: |
        Mensaje autom√°tico enviado inmediatamente despu√©s de una conexi√≥n WebSocket exitosa.
        Confirma autenticaci√≥n JWT pero requiere mensaje `identify` para configuraci√≥n completa.
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: connection_status
          data:
            type: object
            required: [status, message, clientId, requiresIdentify]
            properties:
              status:
                type: string
                const: authenticated
                description: Estado de autenticaci√≥n JWT
              message:
                type: string
                const: "Autenticaci√≥n JWT exitosa. Env√≠a mensaje identify para completar configuraci√≥n."
              clientId:
                type: string
                description: ID √∫nico de la conexi√≥n WebSocket
              requiresIdentify:
                type: boolean
                const: true
                description: Indica que se requiere el mensaje identify
      examples:
        - name: Confirmaci√≥n de autenticaci√≥n
          summary: Respuesta autom√°tica despu√©s de conectar con JWT v√°lido
          payload:
            type: connection_status
            data:
              status: authenticated
              message: "Autenticaci√≥n JWT exitosa. Env√≠a mensaje identify para completar configuraci√≥n."
              clientId: "12345"
              requiresIdentify: true

    MensajeConfirmacionIdentify:
      name: Confirmaci√≥n de Identify
      title: Confirmaci√≥n de configuraci√≥n completa
      summary: |
        Mensaje enviado despu√©s de procesar exitosamente el mensaje `identify`.
        Confirma que el cliente est√° completamente configurado y listo para usar.
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: identify_confirm
          data:
            type: object
            required: [clientType, userId]
            properties:
              clientType:
                type: string
                enum: [driver, citizen]
                description: Tipo de cliente confirmado
              userId:
                type: integer
                description: ID del usuario confirmado
      examples:
        - name: Confirmaci√≥n de conductor
          summary: Confirmaci√≥n para un conductor identificado
          payload:
            type: identify_confirm
            data:
              clientType: driver
              userId: 123
        - name: Confirmaci√≥n de ciudadano
          summary: Confirmaci√≥n para un ciudadano identificado
          payload:
            type: identify_confirm
            data:
              clientType: citizen
              userId: 456

    MensajeListaConductoresIniciales:
      name: Lista Inicial de Conductores
      title: Conductores disponibles al conectar
      summary: |
        Lista de conductores activos y disponibles enviada autom√°ticamente a ciudadanos
        al establecer la conexi√≥n WebSocket. Solo incluye conductores que no est√°n en viaje.
      payload:
        $ref: '#/components/schemas/PayloadListaConductoresIniciales'
      examples:
        - name: Lista de conductores disponibles
          summary: Conductores activos al momento de la conexi√≥n
          payload:
            type: initial_drivers
            drivers:
              - id: 456
                fullName: "Juan P√©rez"
                image: "..base64..."
                location:
                  lat: -12.0464
                  lng: -77.0428
                rating: 4.8
                timestamp: 1703894400
              - id: 789
                fullName: "Mar√≠a Garc√≠a"
                image: "..base64..."
                location:
                  lat: -12.0500
                  lng: -77.0400
                rating: 4.9
                timestamp: 1703894350

    MensajeNuevoConductor:
      name: Nuevo Conductor
      title: Notificaci√≥n de conductor conectado
      summary: Notifica a ciudadanos cuando un nuevo conductor se conecta y est√° disponible
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: new_driver
          data:
            $ref: '#/components/schemas/DriverInfo'
      examples:
        - name: Nuevo conductor disponible
          payload:
            type: new_driver
            data:
              id: 789
              fullName: "Carlos L√≥pez"
              image: "..base64..."
              location:
                lat: -12.0480
                lng: -77.0420
              rating: 4.7
              timestamp: 1703894500

    MensajeActualizacionUbicacionConductor:
      name: Actualizaci√≥n de Ubicaci√≥n de Conductor
      title: Ubicaci√≥n actualizada del conductor
      summary: Notifica a ciudadanos sobre cambios de ubicaci√≥n de conductores activos
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: driver_location_update
          data:
            type: object
            required: [id, location, timestamp]
            properties:
              id:
                type: integer
                description: ID del conductor
              location:
                $ref: '#/components/schemas/Location'
              timestamp:
                type: integer
                description: Timestamp de la actualizaci√≥n
      examples:
        - name: Actualizaci√≥n de ubicaci√≥n
          payload:
            type: driver_location_update
            data:
              id: 456
              location:
                lat: -12.0465
                lng: -77.0429
              timestamp: 1703894600

    MensajeConductorDesconectado:
      name: Conductor Desconectado
      title: Notificaci√≥n de conductor desconectado
      summary: Notifica a ciudadanos cuando un conductor se desconecta y ya no est√° disponible
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: driver_offline
          data:
            type: object
            required: [id]
            properties:
              id:
                type: integer
                description: ID del conductor que se desconect√≥
      examples:
        - name: Conductor desconectado
          payload:
            type: driver_offline
            data:
              id: 456

    MensajeConductorNoDisponible:
      name: Conductor No Disponible
      title: Conductor ocupado en viaje
      summary: Notifica que un conductor ya no est√° disponible porque acept√≥ un viaje
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: driver_unavailable
          data:
            type: object
            required: [id]
            properties:
              id:
                type: integer
                description: ID del conductor que ya no est√° disponible
      examples:
        - name: Conductor ocupado
          payload:
            type: driver_unavailable
            data:
              id: 456

    MensajeConductorDisponible:
      name: Conductor Disponible
      title: Conductor libre nuevamente
      summary: Notifica que un conductor volvi√≥ a estar disponible despu√©s de completar un viaje
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: driver_available
          data:
            $ref: '#/components/schemas/DriverInfo'
      examples:
        - name: Conductor disponible nuevamente
          payload:
            type: driver_available
            data:
              id: 456
              fullName: "Juan P√©rez"
              image: "..base64..."
              location:
                lat: -12.0464
                lng: -77.0428
              rating: 4.8
              timestamp: 1703894700

    NotificacionSolicitudViaje:
      name: Notificaci√≥n de Solicitud de Viaje
      title: Solicitud de viaje recibida
      summary: Notifica a un conductor espec√≠fico sobre una nueva solicitud de viaje
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: trip_request
          data:
            $ref: '#/components/schemas/TripRequestData'
      examples:
        - name: Solicitud de viaje
          payload:
            type: trip_request
            data:
              tripId: 12345
              passengerId: 789
              passengerName: "Ana Garc√≠a"
              driverId: 456
              origin:
                lat: -12.0464
                lng: -77.0428
              destination:
                lat: -12.0500
                lng: -77.0400
              passengerRating: 4.5
              price: 15.50
              distance: 2.3

    NotificacionRespuestaViaje:
      name: Notificaci√≥n de Respuesta de Viaje
      title: Respuesta del conductor al viaje
      summary: Notifica al pasajero sobre la respuesta del conductor (aceptado/rechazado)
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: trip_response
          data:
            $ref: '#/components/schemas/TripResponseData'
      examples:
        - name: Viaje aceptado
          payload:
            type: trip_response
            data:
              tripId: 12345
              accepted: true
              driverId: 456
              driverName: "Juan P√©rez"
              estimatedArrival: 300
        - name: Viaje rechazado
          payload:
            type: trip_response
            data:
              tripId: 12345
              accepted: false
              driverId: 456

    NotificacionActualizacionEstadoViaje:
      name: Notificaci√≥n de Actualizaci√≥n de Estado
      title: Cambio de estado del viaje
      summary: Notifica cambios en el estado del viaje (iniciado, completado, cancelado)
      payload:
        type: object
        required: [type, data]
        properties:
          type:
            type: string
            const: trip_status_update
          data:
            $ref: '#/components/schemas/TripStatusUpdateData'
      examples:
        - name: Viaje iniciado
          payload:
            type: trip_status_update
            data:
              tripId: 12345
              status: started
              driverId: 456
        - name: Viaje completado
          payload:
            type: trip_status_update
            data:
              tripId: 12345
              status: completed
              driverId: 456

    MensajeError:
      name: Error
      title: Mensaje de error
      summary: Notifica errores en el procesamiento de mensajes o operaciones
      payload:
        type: object
        required: [type, message]
        properties:
          type:
            type: string
            const: error
          message:
            type: string
            description: Descripci√≥n del error
      examples:
        - name: Error de formato
          payload:
            type: error
            message: "Formato de mensaje inv√°lido"
        - name: Error de permisos
          payload:
            type: error
            message: "Solo conductores pueden registrar datos"

    MensajeErrorAutenticacion:
      name: Error de Autenticaci√≥n
      title: Error en la autenticaci√≥n JWT
      summary: |
        Mensaje enviado cuando hay problemas con la autenticaci√≥n.
        Despu√©s de este mensaje, la conexi√≥n WebSocket se cierra autom√°ticamente.
      payload:
        type: object
        required: [type, message, timestamp]
        properties:
          type:
            type: string
            const: auth_error
          message:
            type: string
            description: Descripci√≥n del error de autenticaci√≥n
          timestamp:
            type: integer
            description: Timestamp cuando ocurri√≥ el error
      examples:
        - name: Token no proporcionado
          summary: Error cuando no se proporciona token JWT
          payload:
            type: auth_error
            message: "Token de autenticaci√≥n requerido"
            timestamp: 1703894400
        - name: Token inv√°lido
          summary: Error cuando el token JWT es inv√°lido o expirado
          payload:
            type: auth_error
            message: "Token inv√°lido o expirado"
            timestamp: 1703894400

  schemas:
    # Payloads de mensajes enviados por clientes
    PayloadIdentificar:
      type: object
      required:
        - type
        - clientType
        - userId
      properties:
        type:
          type: string
          const: identify
          description: Tipo de mensaje para identificaci√≥n
        clientType:
          type: string
          enum: [driver, citizen]
          description: Tipo de cliente que se conecta
        userId:
          type: integer
          description: ID del usuario (debe coincidir con el del token JWT)
        driverData:
          type: object
          description: Datos del conductor (solo requerido si clientType es 'driver')
          required:
            - fullName
            - location
            - image
            - rating
          properties:
            fullName:
              type: string
              description: Nombre completo del conductor
              example: "Juan P√©rez"
            location:
              $ref: '#/components/schemas/Location'
            image:
              type: string
              format: uri
              description: URL de la imagen de perfil del conductor
              example: "..base64..."
            rating:
              type: number
              minimum: 0
              maximum: 5
              description: Calificaci√≥n promedio del conductor
              example: 4.8
      description: |
        Mensaje OBLIGATORIO para completar la configuraci√≥n del cliente despu√©s de la autenticaci√≥n JWT.
        
        - **Ciudadanos**: Solo necesitan enviar tipo y userId
        - **Conductores**: Deben incluir driverData con ubicaci√≥n actual y datos de perfil
        
        El userId debe coincidir exactamente con el del token JWT.

    PayloadRegistrarConductor:
      type: object
      required:
        - type
        - driverData
      properties:
        type:
          type: string
          const: register_driver
          description: Tipo de mensaje para registro de conductor
        driverData:
          type: object
          required:
            - fullName
            - location
            - image
            - rating
          properties:
            fullName:
              type: string
              description: Nombre completo del conductor
              example: "Juan P√©rez"
            location:
              $ref: '#/components/schemas/Location'
            image:
              type: string
              format: uri
              description: URL de la imagen de perfil del conductor
              example: "..base64..."
            rating:
              type: number
              minimum: 0
              maximum: 5
              description: Calificaci√≥n promedio del conductor
              example: 4.8
      description: |
        Mensaje para que conductores ya identificados actualicen sus datos de perfil.

    PayloadActualizarUbicacion:
      type: object
      required:
        - type
        - location
      properties:
        type:
          type: string
          const: update_location
        location:
          $ref: '#/components/schemas/Location'

    PayloadSolicitudViaje:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          const: trip_request
        data:
          $ref: '#/components/schemas/TripRequestData'

    PayloadRespuestaViaje:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          const: trip_response
        data:
          $ref: '#/components/schemas/TripResponseData'

    PayloadActualizacionEstadoViaje:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          const: trip_status_update
        data:
          $ref: '#/components/schemas/TripStatusUpdateData'

    # Payloads de mensajes enviados por servidor
    PayloadListaConductoresIniciales:
      type: object
      required:
        - type
        - drivers
      properties:
        type:
          type: string
          const: initial_drivers
        drivers:
          type: array
          items:
            $ref: '#/components/schemas/DriverInfo'
          description: Lista de conductores disponibles (no en viaje)

    # Datos compartidos
    TripRequestData:
      type: object
      required:
        - tripId
        - passengerId
        - passengerName
        - origin
        - destination
        - driverId
      properties:
        tripId:
          type: integer
        passengerId:
          type: integer
        passengerName:
          type: string
        driverId:
          type: integer
          description: ID del conductor al que se env√≠a la solicitud
        origin:
          $ref: '#/components/schemas/Location'
        destination:
          $ref: '#/components/schemas/Location'
        passengerRating:
          type: number
          minimum: 0
          maximum: 5
        price:
          type: number
        distance:
          type: number

    TripResponseData:
      type: object
      required:
        - tripId
        - accepted
        - driverId
      properties:
        tripId:
          type: integer
        accepted:
          type: boolean
        driverId:
          type: integer
        driverName:
          type: string
        estimatedArrival:
          type: integer
          minimum: 0

    TripStatusUpdateData:
      type: object
      required:
        - tripId
        - status
      properties:
        tripId:
          type: integer
        status:
          type: string
          enum: [started, completed, canceled]
        driverId:
          type: integer

    DriverInfo:
      type: object
      required:
        - id
        - fullName
        - location
        - rating
      properties:
        id:
          type: integer
        fullName:
          type: string
        image:
          type: string
          format: uri
        location:
          $ref: '#/components/schemas/Location'
        rating:
          type: number
          minimum: 0
          maximum: 5
        timestamp:
          type: integer

    Location:
      type: object
      required:
        - lat
        - lng
      properties:
        lat:
          type: number
          format: double
          description: Latitud en grados decimales
          example: -12.0464
        lng:
          type: number
          format: double
          description: Longitud en grados decimales
          example: -77.0428
