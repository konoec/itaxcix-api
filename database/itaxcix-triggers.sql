-- First, ensure the tb_auditoria table exists as per your schema.
-- (Your provided schema already includes this, so this is just a reminder)
/*
CREATE TABLE tb_auditoria
(
    audi_id              integer generated by default as identity PRIMARY KEY,
    audi_tabla_afectada  text                                   NOT NULL,
    audi_operacion       text                                   NOT NULL,
    audi_usuario_sistema varchar(100)                           NOT NULL,
    audi_fecha           timestamp(0) DEFAULT CURRENT_TIMESTAMP NOT NULL,
    audi_dato_anterior   json,
    audi_dato_nuevo      json
);

ALTER TABLE tb_auditoria
    OWNER TO "itaxcix-user";
*/

-- 1. Create a PL/pgSQL function for auditing
-- This function will be called by triggers on various tables.
CREATE OR REPLACE FUNCTION audit_trigger_function()
RETURNS TRIGGER AS $$
DECLARE
v_old_data JSON;
    v_new_data JSON;
    v_operation TEXT;
    v_table_name TEXT := TG_TABLE_NAME;
    -- In a real application, you would get the current user from a session variable
    -- or a context table. For this example, we'll use CURRENT_USER.
    v_system_user VARCHAR(100) := CURRENT_USER;
BEGIN
    -- Determine the operation type and capture old/new data
    IF TG_OP = 'INSERT' THEN
        v_operation := 'INSERT';
        v_old_data := NULL; -- No old data for INSERT
        v_new_data := to_jsonb(NEW); -- Convert new row to JSONB
    ELSIF TG_OP = 'UPDATE' THEN
        v_operation := 'UPDATE';
        v_old_data := to_jsonb(OLD); -- Convert old row to JSONB
        v_new_data := to_jsonb(NEW); -- Convert new row to JSONB
    ELSIF TG_OP = 'DELETE' THEN
        v_operation := 'DELETE';
        v_old_data := to_jsonb(OLD); -- Convert old row to JSONB
        v_new_data := NULL; -- No new data for DELETE
ELSE
        -- This case should ideally not be reached if trigger is set up correctly
        RAISE WARNING 'Unknown operation % on table %', TG_OP, v_table_name;
RETURN NULL;
END IF;

    -- Insert the audit record into tb_auditoria
INSERT INTO tb_auditoria (
    audi_tabla_afectada,
    audi_operacion,
    audi_usuario_sistema,
    audi_fecha,
    audi_dato_anterior,
    audi_dato_nuevo
) VALUES (
             v_table_name,
             v_operation,
             v_system_user,
             NOW(), -- Use NOW() for the current timestamp
             v_old_data,
             v_new_data
         );

-- For AFTER triggers, always return NEW for INSERT/UPDATE and OLD for DELETE.
-- However, since we are only logging and not modifying the row, returning NULL
-- for AFTER triggers is also acceptable if the trigger is defined as `FOR EACH ROW`.
-- For safety and consistency, returning the appropriate row is good practice.
IF TG_OP = 'DELETE' THEN
        RETURN OLD;
ELSE
        RETURN NEW;
END IF;
END;
$$ LANGUAGE plpgsql;

-- 2. Create triggers for ALL relevant tables
-- These triggers will call the audit_trigger_function() for each change.

CREATE TRIGGER trg_audit_tb_tipo_incidencia
    AFTER INSERT OR UPDATE OR DELETE ON tb_tipo_incidencia
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_tipo_documento
    AFTER INSERT OR UPDATE OR DELETE ON tb_tipo_documento
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_persona
    AFTER INSERT OR UPDATE OR DELETE ON tb_persona
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_estado_conductor
    AFTER INSERT OR UPDATE OR DELETE ON tb_estado_conductor
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_permiso
    AFTER INSERT OR UPDATE OR DELETE ON tb_permiso
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_tipo_codigo_usuario
    AFTER INSERT OR UPDATE OR DELETE ON tb_tipo_codigo_usuario
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_estado_usuario
    AFTER INSERT OR UPDATE OR DELETE ON tb_estado_usuario
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_usuario
    AFTER INSERT OR UPDATE OR DELETE ON tb_usuario
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_perfil_ciudadano
    AFTER INSERT OR UPDATE OR DELETE ON tb_perfil_ciudadano
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_perfil_conductor
    AFTER INSERT OR UPDATE OR DELETE ON tb_perfil_conductor
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_perfil_administrador
    AFTER INSERT OR UPDATE OR DELETE ON tb_perfil_administrador
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_tipo_contacto
    AFTER INSERT OR UPDATE OR DELETE ON tb_tipo_contacto
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_contacto_usuario
    AFTER INSERT OR UPDATE OR DELETE ON tb_contacto_usuario
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_codigo_usuario
    AFTER INSERT OR UPDATE OR DELETE ON tb_codigo_usuario
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_rol
    AFTER INSERT OR UPDATE OR DELETE ON tb_rol
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_rol_usuario
    AFTER INSERT OR UPDATE OR DELETE ON tb_rol_usuario
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_rol_permiso
    AFTER INSERT OR UPDATE OR DELETE ON tb_rol_permiso
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_estado_viaje
    AFTER INSERT OR UPDATE OR DELETE ON tb_estado_viaje
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_departamento
    AFTER INSERT OR UPDATE OR DELETE ON tb_departamento
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_provincia
    AFTER INSERT OR UPDATE OR DELETE ON tb_provincia
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_distrito
    AFTER INSERT OR UPDATE OR DELETE ON tb_distrito
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_coordenadas
    AFTER INSERT OR UPDATE OR DELETE ON tb_coordenadas
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_viaje
    AFTER INSERT OR UPDATE OR DELETE ON tb_viaje
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_incidencia
    AFTER INSERT OR UPDATE OR DELETE ON tb_incidencia
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

-- tb_auditoria is intentionally excluded from auditing itself.

CREATE TRIGGER trg_audit_tb_estado_infraccion
    AFTER INSERT OR UPDATE OR DELETE ON tb_estado_infraccion
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_gravedad_infraccion
    AFTER INSERT OR UPDATE OR DELETE ON tb_gravedad_infraccion
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_infraccion
    AFTER INSERT OR UPDATE OR DELETE ON tb_infraccion
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_configuracion
    AFTER INSERT OR UPDATE OR DELETE ON tb_configuracion
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_calificacion
    AFTER INSERT OR UPDATE OR DELETE ON tb_calificacion
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_modalidad_tuc
    AFTER INSERT OR UPDATE OR DELETE ON tb_modalidad_tuc
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_tipo_combustible
    AFTER INSERT OR UPDATE OR DELETE ON tb_tipo_combustible
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_tipo_servicio
    AFTER INSERT OR UPDATE OR DELETE ON tb_tipo_servicio
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_clase_vehiculo
    AFTER INSERT OR UPDATE OR DELETE ON tb_clase_vehiculo
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_marca
    AFTER INSERT OR UPDATE OR DELETE ON tb_marca
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_tipo_tramite
    AFTER INSERT OR UPDATE OR DELETE ON tb_tipo_tramite
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_modelo
    AFTER INSERT OR UPDATE OR DELETE ON tb_modelo
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_color
    AFTER INSERT OR UPDATE OR DELETE ON tb_color
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_categoria_vehiculo
    AFTER INSERT OR UPDATE OR DELETE ON tb_categoria_vehiculo
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_vehiculo
    AFTER INSERT OR UPDATE OR DELETE ON tb_vehiculo
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_vehiculo_usuario
    AFTER INSERT OR UPDATE OR DELETE ON tb_vehiculo_usuario
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_especificacion_tecnica
    AFTER INSERT OR UPDATE OR DELETE ON tb_especificacion_tecnica
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_estado_tuc
    AFTER INSERT OR UPDATE OR DELETE ON tb_estado_tuc
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_centro_ayuda
    AFTER INSERT OR UPDATE OR DELETE ON tb_centro_ayuda
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_empresa
    AFTER INSERT OR UPDATE OR DELETE ON tb_empresa
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_tramite_tuc
    AFTER INSERT OR UPDATE OR DELETE ON tb_tramite_tuc
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER trg_audit_tb_ruta_servicio
    AFTER INSERT OR UPDATE OR DELETE ON tb_ruta_servicio
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();